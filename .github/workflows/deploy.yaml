name: Build and Deploy
concurrency:
  group: stage_deploy
  cancel-in-progress: true

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lubimovka_frontend
  DEPLOY_PATH: /LUBIMOVKA

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
      - uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      - name: Build and Publish to Github Packages Registry
        uses: docker/build-push-action@v2
        with:
          context: .
          file: config/docker/Dockerfile
          build-args: |
            NEXT_PUBLIC_BASE_URL=${{ secrets.STAGING_BASE_URL }}
            NEXT_PUBLIC_API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:stage
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:main
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy changes on server
    runs-on: ubuntu-latest
    environment:
      name: stage_deploy
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
      - name: Create SSH key
        # (SSH_KNOWN_HOSTS=ssh-keyscan -H сервер, SSH_PRIVATE_KEY - ключ с ПК, которому разрешен вход)
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Create application directory
        run: ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} mkdir -p ${{ env.DEPLOY_PATH }}
      - name: Copy config files
        run: scp -r config/docker/staging/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:${{ env.DEPLOY_PATH }}
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ env.DEPLOY_PATH }}/staging/

            # Используем переменные окружения, сохраненные от CI/CD backend
            # Создание сети вынесено отдельно для возможности независимо перезапускать контейнеры (через external networks)
            # docker network create stage_db_network || true
            docker network create stage_swag_network || true

            # Установка приложения - frontend
            cp -rf ${{ env.DEPLOY_PATH }}/staging/lubimovka-frontend.service /etc/systemd/system/lubimovka-frontend.service
            systemctl daemon-reload
            systemctl restart lubimovka-frontend.service

            # После установки удаляем файлы
            rm ${{ env.DEPLOY_PATH }}/staging/lubimovka-frontend.service
